{"ast":null,"code":"import React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar screenWidth = Math.round(Dimensions.get('window').width);\nvar screenHeight = Math.round(Dimensions.get('window').height);\n\nfunction Swiper(props) {\n  var handleClick = function handleClick(e, item) {\n    var swipeBottom = props.swipeBottom,\n        swipeTop = props.swipeTop;\n\n    if (e.nativeEvent.contentOffset.y < 0) {\n      swipeBottom(item);\n    } else {\n      swipeTop(item);\n    }\n  };\n\n  var images = props.images,\n      textSize = props.textSize,\n      textColor = props.textColor,\n      textBold = props.textBold,\n      textUnderline = props.textUnderline,\n      imageHeight = props.imageHeight;\n  var height = imageHeight && imageHeight > (screenHeight - Platform.OS === 'ios' ? 0 : StatusBar.currentHeight) ? screenHeight - Platform.OS === 'ios' ? 0 : StatusBar.currentHeight : imageHeight;\n  return _jsx(ScrollView, {\n    horizontal: true,\n    pagingEnabled: true,\n    children: images && images.map(function (item, index) {\n      return typeof item.url === 'string' && typeof item.name === 'string' ? _jsxs(ScrollView, {\n        onScrollEndDrag: function onScrollEndDrag(e) {\n          return handleClick(e, item);\n        },\n        children: [_jsx(Image, {\n          style: {\n            height: height,\n            width: screenWidth\n          },\n          source: {\n            uri: item.url\n          }\n        }), _jsx(View, {\n          style: styles.imageText,\n          children: _jsx(Text, {\n            style: [typeof textSize === 'number' && textSize > 0 && textSize <= 40 ? {\n              fontSize: textSize\n            } : {\n              fontSize: 30\n            }, typeof textBold === 'boolean' && textBold && {\n              fontWeight: 'bold'\n            }, typeof textColor === 'string' && {\n              color: textColor\n            }, typeof textUnderline === 'boolean' && textUnderline && {\n              textDecorationLine: 'underline'\n            }],\n            children: item.name && item.name\n          })\n        })]\n      }, index) : null;\n    })\n  });\n}\n\nexport default Swiper;\nvar styles = StyleSheet.create({\n  imageText: {\n    position: 'absolute',\n    bottom: 14,\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%'\n  }\n});","map":{"version":3,"sources":["C:/development/example1/node_modules/react-native-swipe-image/component/Swiper.js"],"names":["React","screenWidth","Math","round","Dimensions","get","width","screenHeight","height","Swiper","props","handleClick","e","item","swipeBottom","swipeTop","nativeEvent","contentOffset","y","images","textSize","textColor","textBold","textUnderline","imageHeight","Platform","OS","StatusBar","currentHeight","map","index","url","name","uri","styles","imageText","fontSize","fontWeight","color","textDecorationLine","StyleSheet","create","position","bottom","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, View, Image, ScrollView, Dimensions, Text, StatusBar, Platform } from 'react-native';\r\nconst screenWidth = Math.round(Dimensions.get('window').width);\r\nconst screenHeight = Math.round(Dimensions.get('window').height);\r\n\r\nfunction Swiper(props) {\r\n    const handleClick = (e, item) => {\r\n        const { swipeBottom, swipeTop } = props\r\n        if (e.nativeEvent.contentOffset.y < 0) {\r\n            swipeBottom(item)\r\n        } else {\r\n            swipeTop(item)\r\n        }\r\n    }\r\n    const { images, textSize, textColor, textBold, textUnderline, imageHeight } = props\r\n    const height = imageHeight && imageHeight > (screenHeight - Platform.OS === 'ios' ? 0\r\n        : StatusBar.currentHeight) ? (screenHeight - Platform.OS === 'ios' ? 0 : StatusBar.currentHeight) : imageHeight;\r\n    return (\r\n        <ScrollView horizontal={true} pagingEnabled={true} >\r\n            {images &&\r\n                images.map((item, index) => {\r\n                    return (typeof item.url === 'string' && typeof item.name === 'string' ?\r\n                        <ScrollView key={index} onScrollEndDrag={(e) => handleClick(e, item)}>\r\n                            <Image\r\n                                style={{ height: height, width: screenWidth }}\r\n                                source={{ uri: item.url }}\r\n                            />\r\n                            <View style={styles.imageText}>\r\n                                <Text style={[\r\n                                    typeof textSize === 'number' && textSize > 0 && textSize <= 40 ? { fontSize: textSize } : { fontSize: 30 },\r\n                                    typeof textBold === 'boolean' && textBold && { fontWeight: 'bold' },\r\n                                    typeof textColor === 'string' && { color: textColor },\r\n                                    typeof textUnderline === 'boolean' && textUnderline && { textDecorationLine: 'underline' }\r\n                                ]}>\r\n                                    {item.name && item.name}\r\n                                </Text>\r\n                            </View>\r\n                        </ScrollView>\r\n                        :\r\n                        null\r\n                    )\r\n                })\r\n            }\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nexport default Swiper;\r\n\r\nconst styles = StyleSheet.create({\r\n    imageText: {\r\n        position: 'absolute',\r\n        bottom: 14,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: '100%'\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}