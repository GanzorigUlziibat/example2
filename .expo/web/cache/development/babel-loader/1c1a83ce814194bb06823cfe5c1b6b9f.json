{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as d3Shape from 'd3-shape';\nimport Svg, { G, Text, TSpan, Path, Pattern } from 'react-native-svg';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AnimatedSvg = Animated.createAnimatedComponent(Svg);\n\nvar _Dimensions$get = Dimensions.get('screen'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar WheelOfFortune = function (_Component) {\n  _inherits(WheelOfFortune, _Component);\n\n  var _super = _createSuper(WheelOfFortune);\n\n  function WheelOfFortune(props) {\n    var _this;\n\n    _classCallCheck(this, WheelOfFortune);\n\n    _this = _super.call(this, props);\n\n    _this.prepareWheel = function () {\n      _this.Rewards = _this.props.options.rewards;\n      _this.RewardCount = _this.Rewards.length;\n      _this.numberOfSegments = _this.RewardCount;\n      _this.fontSize = 20;\n      _this.oneTurn = 360;\n      _this.angleBySegment = _this.oneTurn / _this.numberOfSegments;\n      _this.angleOffset = _this.angleBySegment / 2;\n      _this.winner = _this.props.options.winner ? _this.props.options.winner : Math.floor(Math.random() * _this.numberOfSegments);\n      _this._wheelPaths = _this.makeWheel();\n      _this._angle = new Animated.Value(0);\n\n      _this.props.options.onRef(_assertThisInitialized(_this));\n    };\n\n    _this.resetWheelState = function () {\n      _this.setState({\n        enabled: false,\n        started: false,\n        finished: false,\n        winner: null,\n        gameScreen: new Animated.Value(width - 40),\n        wheelOpacity: new Animated.Value(1),\n        imageLeft: new Animated.Value(width / 2 - 30),\n        imageTop: new Animated.Value(height / 2 - 70)\n      });\n    };\n\n    _this._tryAgain = function () {\n      _this.prepareWheel();\n\n      _this.resetWheelState();\n\n      _this.angleListener();\n\n      _this._onPress();\n    };\n\n    _this.angleListener = function () {\n      _this._angle.addListener(function (event) {\n        if (_this.state.enabled) {\n          _this.setState({\n            enabled: false,\n            finished: false\n          });\n        }\n\n        _this.angle = event.value;\n      });\n    };\n\n    _this.makeWheel = function () {\n      var data = Array.from({\n        length: _this.numberOfSegments\n      }).fill(1);\n      var arcs = d3Shape.pie()(data);\n      var colors = _this.props.options.colors ? _this.props.options.colors : ['#E07026', '#E8C22E', '#ABC937', '#4F991D', '#22AFD3', '#5858D0', '#7B48C8', '#D843B9', '#E23B80', '#D82B2B'];\n      return arcs.map(function (arc, index) {\n        var instance = d3Shape.arc().padAngle(0.01).outerRadius(width / 2).innerRadius(_this.props.options.innerRadius || 100);\n        return {\n          path: instance(arc),\n          color: colors[index % colors.length],\n          value: _this.Rewards[index],\n          centroid: instance.centroid(arc)\n        };\n      });\n    };\n\n    _this._getWinnerIndex = function () {\n      var deg = Math.abs(Math.round(_this.angle % _this.oneTurn));\n\n      if (_this.angle < 0) {\n        return Math.floor(deg / _this.angleBySegment);\n      }\n\n      return (_this.numberOfSegments - Math.floor(deg / _this.angleBySegment)) % _this.numberOfSegments;\n    };\n\n    _this._onPress = function () {\n      var duration = _this.props.options.duration || 10000;\n\n      _this.setState({\n        started: true\n      });\n\n      Animated.timing(_this._angle, {\n        toValue: 365 - _this.winner * (_this.oneTurn / _this.numberOfSegments) + 360 * (duration / 1000),\n        duration: duration,\n        useNativeDriver: true\n      }).start(function () {\n        var winnerIndex = _this._getWinnerIndex();\n\n        _this.setState({\n          finished: true,\n          winner: _this._wheelPaths[winnerIndex].value\n        });\n\n        _this.props.getWinner(_this._wheelPaths[winnerIndex].value, winnerIndex);\n      });\n    };\n\n    _this._textRender = function (x, y, number, i) {\n      return _jsx(Text, {\n        x: x - number.length * 5,\n        y: y - 80,\n        fill: _this.props.options.textColor ? _this.props.options.textColor : '#fff',\n        textAnchor: \"middle\",\n        fontSize: _this.fontSize,\n        children: Array.from({\n          length: number.length\n        }).map(function (_, j) {\n          if (_this.props.options.textAngle === 'vertical') {\n            return _jsx(TSpan, {\n              x: x,\n              dy: _this.fontSize,\n              children: number.charAt(j)\n            }, \"arc-\" + i + \"-slice-\" + j);\n          } else {\n            return _jsx(TSpan, {\n              y: y - 40,\n              dx: _this.fontSize * 0.07,\n              children: number.charAt(j)\n            }, \"arc-\" + i + \"-slice-\" + j);\n          }\n        })\n      });\n    };\n\n    _this._renderSvgWheel = function () {\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_this._renderKnob(), _jsx(Animated.View, {\n          style: {\n            alignItems: 'center',\n            justifyContent: 'center',\n            transform: [{\n              rotate: _this._angle.interpolate({\n                inputRange: [-_this.oneTurn, 0, _this.oneTurn],\n                outputRange: [\"-\" + _this.oneTurn + \"deg\", \"0deg\", _this.oneTurn + \"deg\"]\n              })\n            }],\n            backgroundColor: _this.props.options.backgroundColor ? _this.props.options.backgroundColor : '#fff',\n            width: width - 20,\n            height: width - 20,\n            borderRadius: (width - 20) / 2,\n            borderWidth: _this.props.options.borderWidth ? _this.props.options.borderWidth : 2,\n            borderColor: _this.props.options.borderColor ? _this.props.options.borderColor : '#fff',\n            opacity: _this.state.wheelOpacity\n          },\n          children: _jsx(AnimatedSvg, {\n            width: _this.state.gameScreen,\n            height: _this.state.gameScreen,\n            viewBox: \"0 0 \" + width + \" \" + width,\n            style: {\n              transform: [{\n                rotate: \"-\" + _this.angleOffset + \"deg\"\n              }],\n              margin: 10\n            },\n            children: _jsx(G, {\n              y: width / 2,\n              x: width / 2,\n              children: _this._wheelPaths.map(function (arc, i) {\n                var _arc$centroid = _slicedToArray(arc.centroid, 2),\n                    x = _arc$centroid[0],\n                    y = _arc$centroid[1];\n\n                var number = arc.value.toString();\n                return _jsxs(G, {\n                  children: [_jsx(Path, {\n                    d: arc.path,\n                    strokeWidth: 2,\n                    fill: arc.color\n                  }), _jsx(G, {\n                    rotation: i * _this.oneTurn / _this.numberOfSegments + _this.angleOffset,\n                    origin: x + \", \" + y,\n                    children: _this._textRender(x, y, number, i)\n                  })]\n                }, \"arc-\" + i);\n              })\n            })\n          })\n        })]\n      });\n    };\n\n    _this._renderKnob = function () {\n      var knobSize = _this.props.options.knobSize ? _this.props.options.knobSize : 20;\n      var YOLO = Animated.modulo(Animated.divide(Animated.modulo(Animated.subtract(_this._angle, _this.angleOffset), _this.oneTurn), new Animated.Value(_this.angleBySegment)), 1);\n      return _jsx(Animated.View, {\n        style: {\n          width: knobSize,\n          height: knobSize * 2,\n          justifyContent: 'flex-end',\n          zIndex: 1,\n          opacity: _this.state.wheelOpacity,\n          transform: [{\n            rotate: YOLO.interpolate({\n              inputRange: [-1, -0.5, -0.0001, 0.0001, 0.5, 1],\n              outputRange: ['0deg', '0deg', '35deg', '-35deg', '0deg', '0deg']\n            })\n          }]\n        },\n        children: _jsx(Svg, {\n          width: knobSize,\n          height: knobSize * 100 / 57,\n          viewBox: \"0 0 57 100\",\n          style: {\n            transform: [{\n              translateY: 8\n            }]\n          },\n          children: _jsx(Image, {\n            source: _this.props.options.knobSource ? _this.props.options.knobSource : require(\"../assets/images/knob.png\"),\n            style: {\n              width: knobSize,\n              height: knobSize * 100 / 57\n            }\n          })\n        })\n      });\n    };\n\n    _this.state = {\n      enabled: false,\n      started: false,\n      finished: false,\n      winner: null,\n      gameScreen: new Animated.Value(width - 40),\n      wheelOpacity: new Animated.Value(1),\n      imageLeft: new Animated.Value(width / 2 - 30),\n      imageTop: new Animated.Value(height / 2 - 70)\n    };\n    _this.angle = 0;\n\n    _this.prepareWheel();\n\n    return _this;\n  }\n\n  _createClass(WheelOfFortune, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.options.onRef(undefined);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.angleListener();\n    }\n  }, {\n    key: \"_renderTopToPlay\",\n    value: function _renderTopToPlay() {\n      var _this2 = this;\n\n      if (this.state.started == false) {\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return _this2._onPress();\n          },\n          children: this.props.options.playButton()\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(TouchableOpacity, {\n          style: {\n            position: 'absolute',\n            width: width,\n            height: height / 2,\n            justifyContent: 'center',\n            alignItems: 'center'\n          },\n          children: _jsx(Animated.View, {\n            style: [styles.content, {\n              padding: 10\n            }],\n            children: this._renderSvgWheel()\n          })\n        }), this.props.options.playButton ? this._renderTopToPlay() : null]\n      });\n    }\n  }]);\n\n  return WheelOfFortune;\n}(Component);\n\nexport default WheelOfFortune;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  content: {},\n  startText: {\n    fontSize: 50,\n    color: '#fff',\n    fontWeight: 'bold',\n    textShadowColor: 'rgba(0, 0, 0, 0.4)',\n    textShadowOffset: {\n      width: -1,\n      height: 1\n    },\n    textShadowRadius: 10\n  }\n});","map":{"version":3,"sources":["C:/development/example1/node_modules/react-native-wheel-of-fortune/src/index.js"],"names":["React","Component","d3Shape","Svg","G","Text","TSpan","Path","Pattern","AnimatedSvg","Animated","createAnimatedComponent","Dimensions","get","width","height","WheelOfFortune","props","prepareWheel","Rewards","options","rewards","RewardCount","length","numberOfSegments","fontSize","oneTurn","angleBySegment","angleOffset","winner","Math","floor","random","_wheelPaths","makeWheel","_angle","Value","onRef","resetWheelState","setState","enabled","started","finished","gameScreen","wheelOpacity","imageLeft","imageTop","_tryAgain","angleListener","_onPress","addListener","event","state","angle","value","data","Array","from","fill","arcs","pie","colors","map","arc","index","instance","padAngle","outerRadius","innerRadius","path","color","centroid","_getWinnerIndex","deg","abs","round","duration","timing","toValue","useNativeDriver","start","winnerIndex","getWinner","_textRender","x","y","number","i","textColor","_","j","textAngle","charAt","_renderSvgWheel","styles","container","_renderKnob","alignItems","justifyContent","transform","rotate","interpolate","inputRange","outputRange","backgroundColor","borderRadius","borderWidth","borderColor","opacity","margin","toString","knobSize","YOLO","modulo","divide","subtract","zIndex","translateY","knobSource","require","undefined","playButton","position","content","padding","_renderTopToPlay","StyleSheet","create","flex","startText","fontWeight","textShadowColor","textShadowOffset","textShadowRadius"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {\n  View,\n  StyleSheet,\n  Dimensions,\n  Animated,\n  TouchableOpacity,\n  Image,\n} from 'react-native';\nimport * as d3Shape from 'd3-shape';\n\nimport Svg, {G, Text, TSpan, Path, Pattern} from 'react-native-svg';\n\nconst AnimatedSvg = Animated.createAnimatedComponent(Svg);\n\nconst {width, height} = Dimensions.get('screen');\n\nclass WheelOfFortune extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      enabled: false,\n      started: false,\n      finished: false,\n      winner: null,\n      gameScreen: new Animated.Value(width - 40),\n      wheelOpacity: new Animated.Value(1),\n      imageLeft: new Animated.Value(width / 2 - 30),\n      imageTop: new Animated.Value(height / 2 - 70),\n    };\n    this.angle = 0;\n\n    this.prepareWheel();\n  }\n\n  prepareWheel = () => {\n    this.Rewards = this.props.options.rewards;\n    this.RewardCount = this.Rewards.length;\n\n    this.numberOfSegments = this.RewardCount;\n    this.fontSize = 20;\n    this.oneTurn = 360;\n    this.angleBySegment = this.oneTurn / this.numberOfSegments;\n    this.angleOffset = this.angleBySegment / 2;\n    this.winner = this.props.options.winner\n      ? this.props.options.winner\n      : Math.floor(Math.random() * this.numberOfSegments);\n\n    this._wheelPaths = this.makeWheel();\n    this._angle = new Animated.Value(0);\n\n    this.props.options.onRef(this);\n  };\n\n  resetWheelState = () => {\n    this.setState({\n      enabled: false,\n      started: false,\n      finished: false,\n      winner: null,\n      gameScreen: new Animated.Value(width - 40),\n      wheelOpacity: new Animated.Value(1),\n      imageLeft: new Animated.Value(width / 2 - 30),\n      imageTop: new Animated.Value(height / 2 - 70),\n    });\n  };\n\n  _tryAgain = () => {\n    this.prepareWheel();\n    this.resetWheelState();\n    this.angleListener();\n    this._onPress();\n  };\n\n  angleListener = () => {\n    this._angle.addListener(event => {\n      if (this.state.enabled) {\n        this.setState({\n          enabled: false,\n          finished: false,\n        });\n      }\n\n      this.angle = event.value;\n    });\n  };\n\n  componentWillUnmount() {\n    this.props.options.onRef(undefined);\n  }\n\n  componentDidMount() {\n    this.angleListener();\n  }\n\n  makeWheel = () => {\n    const data = Array.from({length: this.numberOfSegments}).fill(1);\n    const arcs = d3Shape.pie()(data);\n    var colors = this.props.options.colors\n      ? this.props.options.colors\n      : [\n          '#E07026',\n          '#E8C22E',\n          '#ABC937',\n          '#4F991D',\n          '#22AFD3',\n          '#5858D0',\n          '#7B48C8',\n          '#D843B9',\n          '#E23B80',\n          '#D82B2B',\n        ];\n    return arcs.map((arc, index) => {\n      const instance = d3Shape\n        .arc()\n        .padAngle(0.01)\n        .outerRadius(width / 2)\n        .innerRadius(this.props.options.innerRadius || 100);\n      return {\n        path: instance(arc),\n        color: colors[index % colors.length],\n        value: this.Rewards[index],\n        centroid: instance.centroid(arc),\n      };\n    });\n  };\n\n  _getWinnerIndex = () => {\n    const deg = Math.abs(Math.round(this.angle % this.oneTurn));\n    // wheel turning counterclockwise\n    if (this.angle < 0) {\n      return Math.floor(deg / this.angleBySegment);\n    }\n    // wheel turning clockwise\n    return (\n      (this.numberOfSegments - Math.floor(deg / this.angleBySegment)) %\n      this.numberOfSegments\n    );\n  };\n\n  _onPress = () => {\n    const duration = this.props.options.duration || 10000;\n\n    this.setState({\n      started: true,\n    });\n    Animated.timing(this._angle, {\n      toValue:\n        365 -\n        this.winner * (this.oneTurn / this.numberOfSegments) +\n        360 * (duration / 1000),\n      duration: duration,\n      useNativeDriver: true,\n    }).start(() => {\n      const winnerIndex = this._getWinnerIndex();\n      this.setState({\n        finished: true,\n        winner: this._wheelPaths[winnerIndex].value,\n      });\n      this.props.getWinner(this._wheelPaths[winnerIndex].value, winnerIndex);\n    });\n  };\n\n  _textRender = (x, y, number, i) => (\n    <Text\n      x={x - number.length * 5}\n      y={y - 80}\n      fill={\n        this.props.options.textColor ? this.props.options.textColor : '#fff'\n      }\n      textAnchor=\"middle\"\n      fontSize={this.fontSize}>\n      {Array.from({length: number.length}).map((_, j) => {\n        // Render reward text vertically\n        if (this.props.options.textAngle === 'vertical') {\n          return (\n            <TSpan x={x} dy={this.fontSize} key={`arc-${i}-slice-${j}`}>\n              {number.charAt(j)}\n            </TSpan>\n          );\n        }\n        // Render reward text horizontally\n        else {\n          return (\n            <TSpan\n              y={y - 40}\n              dx={this.fontSize * 0.07}\n              key={`arc-${i}-slice-${j}`}>\n              {number.charAt(j)}\n            </TSpan>\n          );\n        }\n      })}\n    </Text>\n  );\n\n  _renderSvgWheel = () => {\n    return (\n      <View style={styles.container}>\n        {this._renderKnob()}\n        <Animated.View\n          style={{\n            alignItems: 'center',\n            justifyContent: 'center',\n            transform: [\n              {\n                rotate: this._angle.interpolate({\n                  inputRange: [-this.oneTurn, 0, this.oneTurn],\n                  outputRange: [\n                    `-${this.oneTurn}deg`,\n                    `0deg`,\n                    `${this.oneTurn}deg`,\n                  ],\n                }),\n              },\n            ],\n            backgroundColor: this.props.options.backgroundColor\n              ? this.props.options.backgroundColor\n              : '#fff',\n            width: width - 20,\n            height: width - 20,\n            borderRadius: (width - 20) / 2,\n            borderWidth: this.props.options.borderWidth\n              ? this.props.options.borderWidth\n              : 2,\n            borderColor: this.props.options.borderColor\n              ? this.props.options.borderColor\n              : '#fff',\n            opacity: this.state.wheelOpacity,\n          }}>\n          <AnimatedSvg\n            width={this.state.gameScreen}\n            height={this.state.gameScreen}\n            viewBox={`0 0 ${width} ${width}`}\n            style={{\n              transform: [{rotate: `-${this.angleOffset}deg`}],\n              margin: 10,\n            }}>\n            <G y={width / 2} x={width / 2}>\n              {this._wheelPaths.map((arc, i) => {\n                const [x, y] = arc.centroid;\n                const number = arc.value.toString();\n\n                return (\n                  <G key={`arc-${i}`}>\n                    <Path d={arc.path} strokeWidth={2} fill={arc.color} />\n                    <G\n                      rotation={\n                        (i * this.oneTurn) / this.numberOfSegments +\n                        this.angleOffset\n                      }\n                      origin={`${x}, ${y}`}>\n                      {this._textRender(x, y, number, i)}\n                    </G>\n                  </G>\n                );\n              })}\n            </G>\n          </AnimatedSvg>\n        </Animated.View>\n      </View>\n    );\n  };\n\n  _renderKnob = () => {\n    const knobSize = this.props.options.knobSize\n      ? this.props.options.knobSize\n      : 20;\n    // [0, this.numberOfSegments]\n    const YOLO = Animated.modulo(\n      Animated.divide(\n        Animated.modulo(\n          Animated.subtract(this._angle, this.angleOffset),\n          this.oneTurn,\n        ),\n        new Animated.Value(this.angleBySegment),\n      ),\n      1,\n    );\n\n    return (\n      <Animated.View\n        style={{\n          width: knobSize,\n          height: knobSize * 2,\n          justifyContent: 'flex-end',\n          zIndex: 1,\n          opacity: this.state.wheelOpacity,\n          transform: [\n            {\n              rotate: YOLO.interpolate({\n                inputRange: [-1, -0.5, -0.0001, 0.0001, 0.5, 1],\n                outputRange: [\n                  '0deg',\n                  '0deg',\n                  '35deg',\n                  '-35deg',\n                  '0deg',\n                  '0deg',\n                ],\n              }),\n            },\n          ],\n        }}>\n        <Svg\n          width={knobSize}\n          height={(knobSize * 100) / 57}\n          viewBox={`0 0 57 100`}\n          style={{\n            transform: [{translateY: 8}],\n          }}>\n          <Image\n            source={\n              this.props.options.knobSource\n                ? this.props.options.knobSource\n                : require('../assets/images/knob.png')\n            }\n            style={{ width: knobSize, height: (knobSize * 100) / 57 }}\n          />\n        </Svg>\n      </Animated.View>\n    );\n  };\n\n  _renderTopToPlay() {\n    if (this.state.started == false) {\n      return (\n        <TouchableOpacity onPress={() => this._onPress()}>\n          {this.props.options.playButton()}\n        </TouchableOpacity>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <TouchableOpacity\n          style={{\n            position: 'absolute',\n            width: width,\n            height: height / 2,\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}>\n          <Animated.View style={[styles.content, {padding: 10}]}>\n            {this._renderSvgWheel()}\n          </Animated.View>\n        </TouchableOpacity>\n        {this.props.options.playButton ? this._renderTopToPlay() : null}\n      </View>\n    );\n  }\n}\n\nexport default WheelOfFortune;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  content: {},\n  startText: {\n    fontSize: 50,\n    color: '#fff',\n    fontWeight: 'bold',\n    textShadowColor: 'rgba(0, 0, 0, 0.4)',\n    textShadowOffset: {width: -1, height: 1},\n    textShadowRadius: 10,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}